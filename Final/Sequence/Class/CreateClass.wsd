@startuml CreateClass

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Admin
participant ":AddClassPage" as AddClassPage
participant ":AddClassFormContainer" as AddClassFormContainer
participant ":ClassForm" as ClassForm
participant ":ClassService (Frontend)" as FEClassService
participant ":Router" as Router
participant ":ClassHTTPTransport" as ClassHTTPTransport
participant ":ClassEndpoint" as ClassEndpoint
participant ":ClassService" as ClassService
participant ":ClassCommand" as ClassCommand
participant ":ClassQuery" as ClassQuery
participant ":TransactionGRPCTransport" as TransactionGRPCTransport
participant ":StorageGRPC Transport" as StorageGRPCTransport
participant ":MaterialService" as MaterialService
participant ":NatsStreaming" as NatsStreaming

Admin->AddClassPage: Open "Add Class" Page
AddClassPage->AddClassFormContainer: Render "Add Class Form" Container
AddClassFormContainer->ClassForm: Render "Class Form"
ClassForm-->AddClassFormContainer: rendered
AddClassFormContainer-->AddClassPage: rendered
AddClassPage-->Admin: rendered

Admin->AddClassPage: choose date
AddClassPage->AddClassFormContainer: fill form
AddClassFormContainer->ClassForm: handleDateChange(value)
ClassForm->FEShiftService: fetchAvailableShifts(date)
FEShiftService-->ClassForm: shifts
ClassForm-->AddClassFormContainer: form data
AddClassFormContainer-->AddClassPage: form data
AddClassPage-->Admin: form data

Admin->AddClassPage: choose date
AddClassPage->AddClassFormContainer: fill form
AddClassFormContainer->ClassForm: handleShiftChange()
ClassForm->FEShiftService: fetchAvailableRooms(date, []shift)
FEShiftService-->ClassForm: rooms
ClassForm-->AddClassFormContainer: form data
AddClassFormContainer-->AddClassPage: form data
AddClassPage-->Admin: form data

Admin->AddClassPage: Fill Form
AddClassPage->AddClassFormContainer: Fill Form
AddClassFormContainer->ClassForm: Fill Form
ClassForm-->AddClassFormContainer: form data
AddClassFormContainer-->AddClassPage: form data
AddClassPage-->Admin: form data

Admin->AddClassPage: Click "Create Class" Button
AddClassPage->AddClassFormContainer: handleClassFormSubmitted()
AddClassFormContainer->FEClassService: createClass(payload)
FEClassService->Router: route("POST", "v2/{event_id}/class", formData)
Router->ClassHTTPTransport: CreateClass(ClassService, []ServerOption)
ClassHTTPTransport->ClassEndpoint: Create(ClassService)
ClassEndpoint->ClassService: CreateMany(context, payload)

loop "for each payload"
    ClassService->ClassService: Validate()

    alt "Data not valid"
        break
            ClassService-->ClassEndpoint: UnprocessableEntity
            ClassEndpoint-->ClassHTTPTransport: UnprocessableEntity
            ClassHTTPTransport-->Router: UnprocessableEntity
            Router-->FEClassService: UnprocessableEntity
            FEClassService-->AddClassFormContainer: UnprocessableEntity
            AddClassFormContainer-->AddClassPage: UnprocessableEntity
            AddClassPage-->Admin: UnprocessableEntity
        end
    else
        ClassService->TransactionGRPCTransport: IsValidTransaction(ProtoBuffer)
        TransactionGRPCTransport-->ClassService: ProtoResponse

        alt "Is Not Valid Transaction"
            ClassService-->ClassEndpoint: BadRequest
            ClassEndpoint-->ClassHTTPTransport: BadRequest
            ClassHTTPTransport-->Router: BadRequest
            Router-->FEClassService: BadRequest
            FEClassService-->AddClassFormContainer: BadRequest
            AddClassFormContainer-->AddClassPage: BadRequest
            AddClassPage-->Admin: BadRequest
        else
            ClassService->ClassService: class := ClassModel()
            ClassService->ClassCommand: Create(context, class)
            ClassCommand-->ClassService: uuid

            opt "has materials"
                ClassService->StorageGRPCTransport: CommitFile(context, ProtoBuffer)
                StorageGRPCTransport-->ClassService: link

                ClassService->MaterialService: Create(context, payload)
                MaterialService-->ClassService: isCreated
            end

            ClassService->ClassQuery: Find(context, []SliceConditions)
            ClassQuery-->ClassService: classes

            ClassService->NatsStreaming: publishClassCreated(context, data)
            NatsStreaming-->ClassService: published
        end
    end

    ClassService-->ClassEndpoint: class
    ClassEndpoint->ClassEndpoint: response := Response(class, nil)
    ClassEndpoint-->ClassHTTPTransport: response
    ClassHTTPTransport-->Router: response
    Router-->FEClassService: response
    FEClassService-->AddClassFormContainer: response
    AddClassFormContainer-->AddClassPage: response
    AddClassPage-->Admin: response
end

@enduml