@startuml GetClass_Member

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Member
participant ":ClassListPage" as ClassListPage
participant ":ClassListContainer" as ClassListContainer
participant ":ClassService (Frontend)" as FEClassService
participant ":Router" as Router
participant ":ClassHTTPTransport" as ClassHTTPTransport
participant ":ClassEndpoint" as ClassEndpoint
participant ":ClassService" as ClassService
participant ":ClassCommand" as ClassCommand
participant ":ClassQuery" as ClassQuery

Member->ClassListPage: Open "Class List" Page
ClassListPage->ClassListContainer: fetchClassesByEventId()
ClassListContainer->FEClassService: fetchClassesByEventId(eventId)
FEClassService->Router: route("GET", "v2/event/{event_id}/classes")
Router->ClassHTTPTransport: FetchPaginatedClasss(ClassService, []ServerOption)
ClassHTTPTransport->ClassEndpoint: All(ClassService, withPaginated)
ClassEndpoint->ClassService: All(context, params)

alt "With Paginate"
    ClassService->ClassQuery: All(context, []SliceConditions, PaginateModel)
else
    ClassService->ClassQuery: All(context, []SliceConditions, nil)
end
ClassQuery-->ClassService: classes
ClassService-->ClassEndpoint: classes

opt "With Paginate"
    ClassEndpoint->ClassService: GetPagination(context, params)
    ClassService->ClassQuery: Count(context, []SliceConditions)
    ClassQuery-->ClassService: total
    ClassService-->ClassEndpoint: total
end

ClassEndpoint->ClassEndpoint: response := Response(classes, paginateMetadata)
ClassEndpoint-->ClassHTTPTransport: response
ClassHTTPTransport-->Router: response
Router-->FEClassService: response
FEClassService-->ClassListContainer: response
ClassListContainer-->ClassListPage: rendered
ClassListPage-->Member: rendered

@enduml