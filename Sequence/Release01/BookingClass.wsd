@startuml BookingClass

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Admin
participant "Page: Add Event" as AddEventPage
participant "Container: Add Event Form" as AddEventFormContainer
participant "Container: Add Class Popup" as AddClassPopupContainer
participant "Service: Class Service" as FEClassService
participant "Router" as Router
participant "Class: HTTP Transport" as ClassHTTPTransport
participant "Class: Endpoint" as ClassEndpoint
participant "Class: Service" as ClassService
participant "Class: Command" as ClassCommand
participant "Class: Query" as ClassQuery
participant "Storage: GRPC Transport" as StorageGRPCTransport
participant "Material: Service" as MaterialService

Admin->AddEventPage: Click "Attach New Class" Button
AddEventPage->AddEventFormContainer: attachClass()
AddEventFormContainer-->AddEventPage: attach
AddEventPage-->Admin: attach

Admin->AddClassPopupContainer: Render "Add Class Popup" Container
AddClassPopupContainer-->Admin: Rendered

Admin->AddClassPopupContainer: Fill Form
AddClassPopupContainer-->Admin: form data

Admin->AddClassPopupContainer: Click "Create Class" Button
AddClassPopupContainer->AddClassPopupContainer: handleClassFormSubmitted()
AddClassPopupContainer->FEClassService: bookingClass(payload)

FEClassService->Router: route("GET", "v2/booking")
Router->ClassHTTPTransport: BookingClass(ClassService, []ServerOption)
ClassHTTPTransport->ClassEndpoint: Booking(ClassService, withPaginated)
ClassEndpoint->ClassService: Create(context, params)
ClassService->ClassService: Validate()

alt "Data not valid"
    ClassService-->ClassEndpoint: UnprocessableEntity
    ClassEndpoint-->ClassHTTPTransport: UnprocessableEntity
    ClassHTTPTransport-->Router: UnprocessableEntity
    Router-->FEClassService: UnprocessableEntity
    FEClassService-->AddClassPopupContainer: UnprocessableEntity
    AddClassPopupContainer-->Admin: UnprocessableEntity
else
    ClassService->ClassService: class := ClassModel()
    ClassService->ClassCommand: Create(context, class)
    ClassCommand-->ClassService: uuid

    opt "has materials"
        ClassService->StorageGRPCTransport: CommitFile(context, ProtoBuffer)
        StorageGRPCTransport-->ClassService: link

        ClassService->MaterialService: Create(context, payload)
        MaterialService-->ClassService: isCreated
    end

    ClassService->ClassQuery: Find(context, []SliceConditions)
    ClassQuery-->ClassService: classes
end

ClassService-->ClassEndpoint: class
ClassEndpoint->ClassEndpoint: response := Response(class, nil)
ClassEndpoint-->ClassHTTPTransport: response
ClassHTTPTransport-->Router: response
Router-->FEClassService: response
FEClassService-->AddClassPopupContainer: response
AddClassPopupContainer-->Admin: response

@enduml