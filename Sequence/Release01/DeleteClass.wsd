@startuml DeleteClass

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Admin
participant "Page: Detail Class" as DetailClassPage
participant "Container: Detail Class" as DetailClassContainer
participant "Service: Class Service" as FEClassService
participant "Router" as Router
participant "Class: HTTP Transport" as ClassHTTPTransport
participant "Class: Endpoint" as ClassEndpoint
participant "Class: Service" as ClassService
participant "Class: Command" as ClassCommand
participant "Class: Query" as ClassQuery
participant "Material: Service" as MaterialService

Admin->DetailClassPage: Click "Delete" Button
DetailClassPage->DetailClassContainer: showDeleteConfirmation(item)

alt "Cancel Delete"
    DetailClassContainer-->DetailClassPage: Close Dialog
    DetailClassPage-->Admin: Close Dialog
else
    DetailClassContainer->DetailClassContainer: handleDelete(item)
    DetailClassContainer->FEClassService: deleteClasses(eventId)
    FEClassService->Router: route("DELETE", "v2/{event_id}/class", formData)
    Router->ClassHTTPTransport: DeleteClass(ClassService, []ServerOption)
    ClassHTTPTransport->ClassEndpoint: Delete(ClassService)
    ClassEndpoint->ClassService: DeleteMany(context, payload)
    ClassService->ClassService: Validate()

    alt "Data Not Valid"
        ClassService-->ClassEndpoint: UnprocessableEntity
        ClassEndpoint-->ClassHTTPTransport: UnprocessableEntity
        ClassHTTPTransport-->Router: UnprocessableEntity
        Router-->FEClassService: UnprocessableEntity
        FEClassService-->DetailClassContainer: UnprocessableEntity
        DetailClassContainer-->DetailClassPage: UnprocessableEntity
        DetailClassPage-->Admin: UnprocessableEntity
    else
        loop "for each uuid"
            ClassService->ClassQuery: GetPureModel(context, []SliceConditions)
            ClassQuery-->ClassService: classes

            ClassService->ClassCommand: Delete(context, class)
            ClassCommand-->ClassService: isDeleted

            ClassService->MaterialService: DeleteByClass(context, classId)
            MaterialService-->ClassService: isDeleted
        end
        
        ClassService-->ClassEndpoint: isDeleted
        ClassEndpoint->ClassEndpoint: response := Response(isDeleted, nil)
        ClassEndpoint-->ClassHTTPTransport: response
        ClassHTTPTransport-->Router: response
        Router-->FEClassService: response
        FEClassService-->DetailClassContainer: response
        DetailClassContainer-->DetailClassPage: response
        DetailClassPage-->Admin: response
    end
end

@enduml