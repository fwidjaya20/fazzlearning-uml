@startuml DeleteUser

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Admin
participant "Page: User" as UserPage
participant "Container: User Table" as UserTableContainer
participant "Component: User Table" as UserTable
participant "Router" as Router
participant "User: HTTP Transport" as UserHTTPTransport
participant "User: Endpoint" as UserEndpoint
participant "User: Service" as UserService
participant "User: Command" as UserCommand
participant "User: Query" as UserQuery

activate Admin

Admin->UserPage: Open "Manage User" Page
activate UserPage
UserPage->UserTableContainer: Render "User Table" Container
activate UserTableContainer
UserTableContainer->UserTable: Render "User Table"
activate UserTable
UserTable-->UserTableContainer: rendered
UserTableContainer->Router: route("GET", "v2/users")
activate Router
Router->UserHTTPTransport: FetchPaginatedUsers(UserService, []ServerOption)
activate UserHTTPTransport
UserHTTPTransport->UserEndpoint: All(UserService, withPaginated)
activate UserEndpoint
UserEndpoint->UserService: All(params)

activate UserService
activate UserQuery
alt "With Paginate"
    UserService->UserQuery: All([]SliceConditions, PaginateModel)
else
    UserService->UserQuery: All([]SliceConditions, nil)
end
UserQuery-->UserService: users
UserService-->UserEndpoint: users

opt "With Paginate"
    UserEndpoint->UserService: GetPagination(PaginateModel)
    UserService->UserQuery: Count([]SliceConditions)
    UserQuery-->UserService: total
    UserService-->UserEndpoint: total
end
deactivate UserQuery
deactivate UserService

UserEndpoint->UserEndpoint: response := Response(users, paginateMetadata)
UserEndpoint-->UserHTTPTransport: response
deactivate UserEndpoint
UserHTTPTransport-->Router: response
deactivate UserHTTPTransport
Router-->UserTableContainer: response
deactivate Router
UserTableContainer->UserTable: Render "User Table"
UserTable-->UserTableContainer: rendered
UserTableContainer-->UserPage: rendered
UserPage-->Admin: rendered

Admin->UserPage: Mark "User"
UserPage->UserTableContainer: Mark "User"
UserTableContainer->UserTable: Mark "User"
UserTable-->UserTableContainer: marked
deactivate UserTable
UserTableContainer-->UserPage: marked
UserPage-->Admin: marked

Admin->UserPage: Click "Delete Selected" Button
UserPage->UserTableContainer: Click "Delete Selected" Button
UserTableContainer->UserTableContainer: Show Dialod Confirmation

alt "Cancel Delete"
    UserTableContainer-->UserPage
    UserPage-->Admin
else
    UserTableContainer->Router: route("DELETE", "v2/users", formData)
    activate Router
    Router->UserHTTPTransport: DeleteUsers(UserService, []ServerOption)
    activate UserHTTPTransport
    UserHTTPTransport->UserEndpoint: DeleteMany(UserService)
    activate UserEndpoint
    UserEndpoint->UserService: DeleteUsers([]uuid)

    activate UserService
    loop "for each uuid"
        UserService->UserQuery: GetPureModel([]SliceConditions])
        activate UserQuery
        UserQuery-->UserService: user
        deactivate UserQuery

        UserService->UserCommand: Delete(user)
        activate UserCommand
        UserCommand-->UserService: isDeleted
        deactivate UserCommand
    end
    deactivate UserService
    UserService-->UserEndpoint: isDeleted
    UserEndpoint->UserEndpoint: response := Response(isDeleted, nil)
    UserEndpoint-->UserHTTPTransport: response
    deactivate UserEndpoint
    UserHTTPTransport-->Router: response
    deactivate UserHTTPTransport
    Router-->UserTableContainer: response
    deactivate Router
    UserTableContainer-->UserPage: response
    deactivate UserTableContainer
    UserPage-->Admin: response
    deactivate UserPage
end

deactivate Admin

@enduml