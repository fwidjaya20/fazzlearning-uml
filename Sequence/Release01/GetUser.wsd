@startuml DeleteUser

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Admin
participant "Page: User" as UserPage
participant "Container: User Table" as UserTableContainer
participant "Component: User Table" as UserTable
participant "Service: User Table" as FEUserService
participant "Router" as Router
participant "User: HTTP Transport" as UserHTTPTransport
participant "User: Endpoint" as UserEndpoint
participant "User: Service" as UserService
participant "User: Command" as UserCommand
participant "User: Query" as UserQuery

Admin->UserPage: Open "Manage User" Page
UserPage->UserTableContainer: Render "User Table" Container
UserTableContainer->UserTable: Render "User Table"
UserTable-->UserTableContainer: rendered
UserTableContainer->UserTableContainer: fetchUser()
UserTableContainer->FEUserService: fetchUser(page, limit, keyword)
FEUserService->Router: route("GET", "v2/users")
Router->UserHTTPTransport: FetchPaginatedUsers(UserService, []ServerOption)
UserHTTPTransport->UserEndpoint: All(UserService, withPaginated)
UserEndpoint->UserService: All(context, params)

alt "With Paginate"
    UserService->UserQuery: All(context, []SliceConditions, PaginateModel)
else
    UserService->UserQuery: All(context, []SliceConditions, nil)
end

UserQuery-->UserService: users
UserService-->UserEndpoint: users

opt "With Paginate"
    UserEndpoint->UserService: GetPagination(context, PaginateModel)
    UserService->UserQuery: Count(context, []SliceConditions)
    UserQuery-->UserService: total
    UserService-->UserEndpoint: total
end

UserEndpoint->UserEndpoint: response := Response(users, paginateMetadata)
UserEndpoint-->UserHTTPTransport: response
UserHTTPTransport-->Router: response
Router-->FEUserService: response
FEUserService-->UserTableContainer: response
UserTableContainer->UserTable: Render "User Table"
UserTable-->UserTableContainer: rendered
UserTableContainer-->UserPage: rendered
UserPage-->Admin: rendered

@enduml