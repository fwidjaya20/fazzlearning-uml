@startuml UnbookingClass

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Admin
participant "Page: Add Event" as AddEventPage
participant "Container: Attach Class" as AttachClassContainer
participant "Component: Class List View" as ClassListView
participant "Router" as Router
participant "Class: HTTP Transport" as ClassHTTPTransport
participant "Class: Endpoint" as ClassEndpoint
participant "Class: Service" as ClassService
participant "Class: Command" as ClassCommand
participant "Class: Query" as ClassQuery
participant "Material: Service" as MaterialService

activate Admin

Admin->AddEventPage: Open "Add Event" Page
activate AddEventPage
AddEventPage->AttachClassContainer: Render "Attach Class" Container
activate AttachClassContainer
AttachClassContainer->ClassListView: Render "Class List View"
activate ClassListView
ClassListView-->AttachClassContainer: rendered
AttachClassContainer->Router: route("GET", "v2/bookings")
activate Router
Router->ClassHTTPTransport: FetchBookedRoomByUser(ClassService, []ServerOption)
activate ClassHTTPTransport
ClassHTTPTransport->ClassEndpoint: BookedByUser(ClassService, withPaginated)
activate ClassEndpoint
ClassEndpoint->ClassService: AllBooked(params)

activate ClassService
ClassService->ClassQuery: FindBooked([]SliceConditions)
activate ClassQuery
ClassQuery-->ClassService: classes
deactivate ClassQuery
ClassService-->ClassEndpoint: classes
deactivate ClassService

ClassEndpoint->ClassEndpoint: response := Response(classes, nil)
ClassEndpoint-->ClassHTTPTransport: response
deactivate ClassEndpoint
ClassHTTPTransport-->Router: response
deactivate ClassHTTPTransport
Router-->AttachClassContainer: response
deactivate Router
AttachClassContainer->ClassListView: Render "Class List View"
ClassListView-->AttachClassContainer: rendered
AttachClassContainer-->AddEventPage: rendered
AddEventPage-->Admin: rendered

Admin->AddEventPage: Click "Delete" Button
AddEventPage->AttachClassContainer: Click "Delete" Button
AttachClassContainer->ClassListView: Click "Delete" Button
ClassListView->ClassListView: Show Dialod Confirmation

alt "Cancel Delete"
    ClassListView-->AttachClassContainer: Close Dialog
    AttachClassContainer-->AddEventPage: Close Dialog
    AddEventPage-->Admin: Close Dialog
else
    ClassListView->Router: route("DELETE", "v2/booking/{class_id}")
    activate Router
    Router->ClassHTTPTransport: DeleteBookedClass(ClassService, []ServerOption)
    activate ClassHTTPTransport
    ClassHTTPTransport->ClassEndpoint: DeleteBooked(ClassService)
    activate ClassEndpoint
    ClassEndpoint->ClassService: Delete(payload)

    activate ClassService
    ClassService->ClassQuery: GetPureModel([]SliceConditions)
    activate ClassQuery
    ClassQuery-->ClassService: class
    deactivate ClassQuery

    ClassService->ClassCommand: Delete(class)
    activate ClassCommand
    ClassCommand-->ClassService: isDeleted
    deactivate ClassCommand

    ClassService->MaterialService: DeleteByClass(uuid)
    activate MaterialService
    MaterialService-->ClassService: isDeleted
    deactivate MaterialService
    deactivate ClassService
    
    ClassService-->ClassEndpoint: isDeleted
    ClassEndpoint->ClassEndpoint: response := Response(isDeleted, nil)
    ClassEndpoint-->ClassHTTPTransport: response
    deactivate ClassEndpoint
    ClassHTTPTransport-->Router: response
    deactivate ClassHTTPTransport
    Router-->ClassListView: response
    deactivate Router
    ClassListView->ClassListView: Render "Class List View"
    ClassListView-->AttachClassContainer: rendered
    deactivate ClassListView
    AttachClassContainer-->AddEventPage: rendered
    deactivate AttachClassContainer
    AddEventPage-->Admin: rendered
    deactivate AddEventPage
end

deactivate Admin

@enduml