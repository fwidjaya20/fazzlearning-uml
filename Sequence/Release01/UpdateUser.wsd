@startuml UpdateUser

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Admin
participant "Page: Edit User" as EditUserPage
participant "Container: Edit User Form" as EditUserFormContainer
participant "Component: User Form" as UserFormComponent
participant "Service: User Service" as FEUserService
participant "Service: Role Service" as FERoleService
participant "Service: Division Service" as FEDivisionService
participant "Router" as Router
participant "User: HTTP Transport" as UserHTTPTransport
participant "User: Endpoint" as UserEndpoint
participant "User: Service" as UserService
participant "User: Query" as UserQuery
participant "User: Command" as UserCommand

activate Admin

' Load Data
Admin->EditUserPage: Open "Edit User" Page
activate EditUserPage
EditUserPage->EditUserFormContainer: Render "Edit User Form" Container
activate EditUserFormContainer
EditUserFormContainer->UserFormComponent: Render "Edit User Form"

' Fetch Roles
UserFormComponent->UserFormComponent: fetchRoles()
UserFormComponent->FERoleService: fetchRoles(page, limit)
FERoleService-->UserFormComponent: roles
UserFormComponent->UserFormComponent: binding response to attibute
' End Fetch Roles

' Fetch Division
UserFormComponent->UserFormComponent: fetchDivisions()
UserFormComponent->FEDivisionService: fetchDivisions(page, limit, keyword)
FEDivisionService-->UserFormComponent: divisions
UserFormComponent->UserFormComponent: binding response to attibute
' End Fetch Division

UserFormComponent-->EditUserFormContainer: rendered
EditUserFormContainer-->EditUserPage: rendered
EditUserPage-->Admin: rendered
' End Load Data

' Fill Data
Admin->EditUserPage: Fill Form
EditUserPage->EditUserFormContainer: Fill Form
EditUserFormContainer->UserFormComponent: Fill Form

opt "Do Search Role"
    UserFormComponent->UserFormComponent: fetchRoles()
end

opt "Do Search Division"
    UserFormComponent->UserFormComponent: fetchDivisions()
end

UserFormComponent-->EditUserFormContainer: form data
EditUserFormContainer-->EditUserPage: form data
EditUserPage-->Admin: form data
' End Fill Data

Admin->EditUserPage: Click "Update User" Button
EditUserPage->EditUserFormContainer: handleUserFormSubmitted()
EditUserFormContainer->FEUserService: updateUser(userId, payload)
FEUserService->Router: Router("PUT", "v2/user/{email}", formData)
Router->UserHTTPTransport: UpdateUser(UserService, []ServerOption)
UserHTTPTransport->UserEndpoint: Update(UserService, email)
UserEndpoint->UserService: UpdateUser(context, payload, email)
UserService->UserService: Validate()

alt "Data not valid"
    UserService-->UserEndpoint: UnprocessableEntity
    UserEndpoint-->UserHTTPTransport: UnprocessableEntity
    UserHTTPTransport-->Router: UnprocessableEntity
    Router-->FEUserService: UnprocessableEntity
    FEUserService-->EditUserFormContainer: UnprocessableEntity
    EditUserFormContainer-->EditUserPage: UnprocessableEntity
    EditUserPage-->Admin: UnprocessableEntity
else
    UserService->UserQuery: Find(context, []SliceCondition)
    UserQuery-->UserService: user

    UserService->UserService: binding user data

    UserService->UserCommand: Update(context, user)
    UserCommand-->UserService: uuid
    UserService->UserEndpoint: user
    UserEndpoint->UserEndpoint:  response := Response(user, nil)
    UserEndpoint-->UserHTTPTransport: response
    UserHTTPTransport-->Router: response
    Router-->FEUserService: response
    FEUserService-->EditUserFormContainer: response
    EditUserFormContainer-->EditUserPage: response
    EditUserPage-->Admin: response
end

@enduml