@startuml CreateUser

skinparam Monochrome true
skinparam Shadowing false

actor Admin
participant "Page: Create User" as CreateUserPage
participant "Container: Add User Form" as AddUserFormContainer
participant "Component: User Form" as UserFormComponent
participant "Route" as Route
participant "User: HTTP Transport" as UserHTTPTransport
participant "Role: HTTP Transport" as RoleHTTPTransport
participant "Division: HTTP Transport" as DivisionHTTPTransport
participant "User: Endpoint" as UserEndpoint
participant "Role: Endpoint" as RoleEndpoint
participant "Division: Endpoint" as DivisionEndpoint
participant "User: Service" as UserService
participant "Role: Service" as RoleService
participant "Division: Service" as DivisionService
participant "Session: Command" as SessionCommand
participant "User: Query" as UserQuery
participant "User: Command" as UserCommand
participant "Role: Query" as RoleQuery
participant "Division: Query" as DivisionQuery
participant "Nats Streaming" as NatsStreaming

activate Admin

' Load Data
Admin->CreateUserPage: Open "Add User" Page
activate CreateUserPage
CreateUserPage->AddUserFormContainer: Render "Add User Form" Container
activate AddUserFormContainer
AddUserFormContainer->UserFormComponent: Render "Add User Form"

' Fetch Roles
activate UserFormComponent
UserFormComponent->Route: route("GET", "v2/roles")
activate Route
Route->RoleHTTPTransport: FetchPaginatedRoles(RoleService, []ServerOption)
activate RoleHTTPTransport
RoleHTTPTransport->RoleEndpoint: All(RoleService, withPaginate)
activate RoleEndpoint
RoleEndpoint->RoleService: All(params)
activate RoleService
activate RoleQuery

alt "With Paginate"
    RoleService->RoleQuery: All([]SliceConditions, PaginateModel)
else
    RoleService->RoleQuery: All([]SliceConditions, nil)
end

RoleQuery-->RoleService: roles
RoleService-->RoleEndpoint: roles

opt "With Paginate"
    RoleEndpoint->RoleService: GetPaginateion(PaginateModel)
    RoleService->RoleQuery: Count([]SliceConditions)
    RoleQuery-->RoleService: total
    RoleService-->RoleEndpoint: total
end

deactivate RoleQuery
deactivate RoleService
RoleEndpoint->RoleEndpoint: response := Response(roles, paginateMetadata)
RoleEndpoint-->RoleHTTPTransport: response
deactivate RoleEndpoint
RoleHTTPTransport-->Route: response
deactivate RoleHTTPTransport
Route-->UserFormComponent: response
deactivate Route
UserFormComponent->UserFormComponent: binding response to attibute
' End Fetch Roles

' Fetch Division
UserFormComponent->Route: route("GET", "v2/divisions")
activate Route
Route->DivisionHTTPTransport: FetchPaginatedDivisions(DivisionService, []ServerOption)
activate DivisionHTTPTransport
DivisionHTTPTransport->DivisionEndpoint: All(DivisionService)
activate DivisionEndpoint
DivisionEndpoint->DivisionService: All()
activate DivisionService
activate DivisionQuery

alt "With Paginate"
    DivisionService->DivisionQuery: All([]SliceConditions, PaginateModel)
else
    DivisionService->DivisionQuery: All([]SliceConditions, nil)
end

DivisionQuery-->DivisionService: divisions
DivisionService-->DivisionEndpoint: divisions

opt "With Paginate"
    DivisionEndpoint->DivisionService: GetPaginateion(PaginateModel)
    DivisionService->DivisionQuery: Count([]SliceConditions)
    DivisionQuery-->DivisionService: total
    DivisionService-->DivisionEndpoint: total
end

deactivate DivisionQuery
deactivate DivisionService
DivisionEndpoint->DivisionEndpoint: response := Response(divisions, nil)
DivisionEndpoint-->DivisionHTTPTransport: response
deactivate DivisionEndpoint
DivisionHTTPTransport-->Route: response
deactivate DivisionHTTPTransport
Route-->UserFormComponent: response
deactivate Route
UserFormComponent->UserFormComponent: binding response to attibute
' End Fetch Division

UserFormComponent-->AddUserFormContainer: rendered
AddUserFormContainer-->CreateUserPage: rendered
CreateUserPage-->Admin: rendered
' End Load Data

' Fill Data
Admin->CreateUserPage: Fill Form
CreateUserPage->AddUserFormContainer: Fill Form
AddUserFormContainer->UserFormComponent: Fill Form

opt "Do Search Role"
    UserFormComponent->Route: route("GET", "v2/roles?search=role_to_search")
    activate Route
    Route->RoleHTTPTransport: FetchPaginatedRoles(RoleService, []ServerOption)
    activate RoleHTTPTransport
    RoleHTTPTransport->RoleEndpoint: All(RoleService, withPaginate)
    activate RoleEndpoint
    RoleEndpoint->RoleService: All(params)
    activate RoleService
    activate RoleQuery

    alt "With Paginate"
        RoleService->RoleQuery: All([]SliceConditions, PaginateModel)
    else
        RoleService->RoleQuery: All([]SliceConditions, nil)
    end

    RoleQuery-->RoleService: roles
    RoleService-->RoleEndpoint: roles

    opt "With Paginate"
        RoleEndpoint->RoleService: GetPaginateion(PaginateModel)
        RoleService->RoleQuery: Count([]SliceConditions)
        RoleQuery-->RoleService: total
        RoleService-->RoleEndpoint: total
    end

    deactivate RoleQuery
    deactivate RoleService
    RoleEndpoint->RoleEndpoint: response := Response(roles, paginateMetadata)
    RoleEndpoint-->RoleHTTPTransport: response
    deactivate RoleEndpoint
    RoleHTTPTransport-->Route: response
    deactivate RoleHTTPTransport
    Route-->UserFormComponent: response
    deactivate Route
    UserFormComponent->UserFormComponent: binding repsonse to attribute
end

opt "Do Search Division"
    UserFormComponent->Route: route("GET", "v2/divisions?search=division_to_search")
    activate Route
    Route->DivisionHTTPTransport: FetchPaginatedDivisions(DivisionService, []ServerOption)
    activate DivisionHTTPTransport
    DivisionHTTPTransport->DivisionEndpoint: All(DivisionService)
    activate DivisionEndpoint
    DivisionEndpoint->DivisionService: All()
    activate DivisionService
    activate DivisionQuery

    alt "With Paginate"
        DivisionService->DivisionQuery: All([]SliceConditions, PaginateModel)
    else
        DivisionService->DivisionQuery: All([]SliceConditions, nil)
    end

    DivisionQuery-->DivisionService: divisions
    DivisionService-->DivisionEndpoint: divisions

    opt "With Paginate"
        DivisionEndpoint->DivisionService: GetPaginateion(PaginateModel)
        DivisionService->DivisionQuery: Count([]SliceConditions)
        DivisionQuery-->DivisionService: total
        DivisionService-->DivisionEndpoint: total
    end

    deactivate DivisionQuery
    deactivate DivisionService
    DivisionEndpoint->DivisionEndpoint: response := Response(divisions, nil)
    DivisionEndpoint-->DivisionHTTPTransport: response
    deactivate DivisionEndpoint
    DivisionHTTPTransport-->Route: response
    deactivate DivisionHTTPTransport
    Route-->UserFormComponent: response
    deactivate Route
    UserFormComponent->UserFormComponent: binding repsonse to attribute
end

UserFormComponent-->AddUserFormContainer: form data
deactivate UserFormComponent
AddUserFormContainer-->CreateUserPage: form data
CreateUserPage-->Admin: form data
' End Fill Data

Admin->CreateUserPage: Click "Create User" Button
CreateUserPage->AddUserFormContainer: Click "Create User" Button
AddUserFormContainer->Route: route("POST", "v2/user", formData)
activate Route
Route->UserHTTPTransport: CreateUser(UserService, []ServerOption)
activate UserHTTPTransport
UserHTTPTransport->UserEndpoint: Create(UserService)
activate UserEndpoint
UserEndpoint->UserService: CreateUser(payload)
activate UserService
UserService->UserService: Validate()

alt "Data not valid"
    UserService-->UserEndpoint: UnprocessableEntity
    UserEndpoint-->UserHTTPTransport: UnprocessableEntity
    UserHTTPTransport-->Route: UnprocessableEntity
    Route-->AddUserFormContainer: UnprocessableEntity
    AddUserFormContainer-->CreateUserPage: UnprocessableEntity
    CreateUserPage-->Admin: UnprocessableEntity
else
    UserService->UserService: user := UserModel()
    UserService->UserCommand: Create(user)
    activate UserCommand
    UserCommand-->UserService: uuid
    deactivate UserCommand
    UserService->UserQuery: Find(uuid)
    activate UserQuery
    UserQuery-->UserService: user
    deactivate UserQuery
    UserService->NatsStreaming: Publish Event Subject User.UserCreated
    activate NatsStreaming
    NatsStreaming-->UserService
    deactivate NatsStreaming
    UserService->UserEndpoint: user
    deactivate UserService
    UserEndpoint->UserEndpoint:  response := Response(user, nil)
    UserEndpoint-->UserHTTPTransport: response
    deactivate UserEndpoint
    UserHTTPTransport-->Route: response
    deactivate UserHTTPTransport
    Route-->AddUserFormContainer: response
    deactivate Route
    AddUserFormContainer-->CreateUserPage: response
    deactivate AddUserFormContainer
    CreateUserPage-->Admin: response
    deactivate CreateUserPage
end

deactivate Admin

@enduml