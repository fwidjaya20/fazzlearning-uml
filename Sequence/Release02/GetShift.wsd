@startuml GetShift

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Admin
participant "Page: Shift" as ShiftPage
participant "Container: Shift Table" as ShiftTableContainer
participant "Component: Shift Table" as ShiftTable
participant "Service: Shift Service" as FEShiftService
participant "Router" as Router
participant "Shift: HTTP Transport" as ShiftHTTPTransport
participant "Shift: Endpoint" as ShiftEndpoint
participant "Shift: Service" as ShiftService
participant "Shift: Query" as ShiftQuery

Admin->ShiftPage: Open "Manage Shift" Page
ShiftPage->ShiftTableContainer: Render "Shift Table" Container
ShiftTableContainer->ShiftTable: Render "Shift Table"
ShiftTable-->ShiftTableContainer: rendered
ShiftTableContainer->FEShiftService: fetchShifts(page)
FEShiftService->Router: route("GET", "v2/shifts")
Router->ShiftHTTPTransport: FetchPaginatedShifts(ShiftService, []ServerOption)
ShiftHTTPTransport->ShiftEndpoint: All(ShiftService, withPaginated)
ShiftEndpoint->ShiftService: All(context, params)

alt "With Paginate"
    ShiftService->ShiftQuery: All(context, []SliceConditions, PaginateModel)
else
    ShiftService->ShiftQuery: All(context, []SliceConditions, nil)
end
ShiftQuery-->ShiftService: shifts
ShiftService-->ShiftEndpoint: shifts

opt "With Paginate"
    ShiftEndpoint->ShiftService: GetPagination(context, params)
    ShiftService->ShiftQuery: Count(context, []SliceConditions)
    ShiftQuery-->ShiftService: total
    ShiftService-->ShiftEndpoint: total
end

ShiftEndpoint->ShiftEndpoint: response := Response(shifts, paginateMetadata)
ShiftEndpoint-->ShiftHTTPTransport: response
ShiftHTTPTransport-->Router: response
Router-->FEShiftService: response
FEShiftService-->ShiftTableContainer: response
ShiftTableContainer->ShiftTable: Render "Shift Table"
ShiftTable-->ShiftTableContainer: rendered
ShiftTableContainer-->ShiftPage: rendered
ShiftPage-->Admin: rendered

@enduml