@startuml GetClassAvailability

skinparam Monochrome true
skinparam Shadowing false

actor Member
participant "Page: Class" as ClassPage
participant "Container: Class List View" as ClassListViewContainer
participant "Component: Class Card" as ClassCard
participant "Router" as Router
participant "Class: HTTP Transport" as ClassHTTPTransport
participant "Class: Endpoint" as ClassEndpoint
participant "Class: Service" as ClassService
participant "Class: Command" as ClassCommand
participant "Class: Query" as ClassQuery

activate Member

Member->ClassPage: Open "Class List" Page
activate ClassPage
ClassPage->ClassListViewContainer: Render "Class List View" Container
activate ClassListViewContainer
ClassListViewContainer->ClassCard: Render "Class Card"
activate ClassCard
ClassCard-->ClassListViewContainer: rendered
ClassListViewContainer->Router: route("GET", "v2/event/{event_id}/classes/available")
activate Router
Router->ClassHTTPTransport: FetchAvailableToJoin(ClassService, []ServerOption)
activate ClassHTTPTransport
ClassHTTPTransport->ClassEndpoint: UserAvailability(ClassService)
activate ClassEndpoint
ClassEndpoint->ClassService: FindClassByUserAvailability(payload)

activate ClassService
ClassService->ClassQuery: FindUserAvailabilityRegistered([]SliceConditions)
activate ClassQuery
ClassQuery-->ClassService: classes
deactivate ClassQuery

ClassEndpoint->ClassEndpoint: response := Response(classes, paginateMetadata)
ClassEndpoint-->ClassHTTPTransport: response
deactivate ClassEndpoint
ClassHTTPTransport-->Router: response
deactivate ClassHTTPTransport
Router-->ClassListViewContainer: response
deactivate Router
ClassListViewContainer->ClassCard: Render "Class Card"
deactivate ClassCard
ClassCard-->ClassListViewContainer: rendered
ClassListViewContainer-->ClassPage: rendered
deactivate ClassListViewContainer
ClassPage-->Member: rendered
deactivate ClassPage

deactivate Member

@enduml