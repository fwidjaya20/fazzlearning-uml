@startuml PostComment

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor "Member" as Member
participant "Page: Event" as EventPage
participant "Container: Event Comments" as EventCommentsContainer
participant "Component: Comment" as CommentComponent
participant "Component: CommentForm" as CommentFormComponent
participant "Service: Conversation Service" as FEConversationService
participant "Router" as Router
participant "Conversation: HTTP Transport" as ConversationHTTPTransport
participant "Conversation: Endpoint" as ConversationEndpoint
participant "Conversation: Service" as ConversationService
participant "Conversation: Command" as ConversationCommand
participant "Conversation: Query" as ConversationQuery

Member->EventPage: Open "Event" Page
EventPage->EventCommentsContainer: Render "Event Comments" Container
EventCommentsContainer->CommentComponent: Render "Comment" Component
CommentComponent->CommentFormComponent: Render "Comment Form" Component
CommentFormComponent-->CommentComponent: rendered
CommentComponent-->EventCommentsContainer: rendered
EventCommentsContainer-->EventPage: rendered
EventPage-->Member: rendered

Member->EventPage: Fill form
EventPage->EventCommentsContainer: Fill form
EventCommentsContainer->CommentComponent: Fill form
CommentComponent->CommentFormComponent: Fill form
CommentFormComponent-->CommentComponent: form data
CommentComponent-->EventCommentsContainer: form data
EventCommentsContainer-->EventPage: form data
EventPage-->Member: form data

Member->EventPage: Click "Send" Button
EventPage->EventCommentsContainer: handleSubmitComment()
EventCommentsContainer->FEConversationService: postComment(eventId, payload)
FEConversationService->Router: route("POST", "v2/event/{event_id}/comment")
Router->ConversationHTTPTransport: CreateComment(ConversationService, []ServerOption)
ConversationHTTPTransport->ConversationEndpoint: CreateComment(ConversationService)
ConversationEndpoint->ConversationService: CreateComment(context, payload)
ConversationService->ConversationService: Validate()

alt "Is Not Valid"
    ConversationService-->ConversationEndpoint: UnprocessableEntity
    ConversationEndpoint-->ConversationHTTPTransport: UnprocessableEntity
    ConversationHTTPTransport-->Router: UnprocessableEntity
    Router-->FEConversationService: UnprocessableEntity
    FEConversationService-->EventCommentsContainer: UnprocessableEntity
    EventCommentsContainer-->EventPage: UnprocessableEntity
    EventPage-->Member: UnprocessableEntity
else
    ConversationService->ConversationService: m := CommentModel()
    ConversationService->ConversationCommand: Create(context, m)
    ConversationCommand-->ConversationService: uuid

    ConversationService->ConversationQuery: GetPureCommendModel(context, []SliceCondition)
    ConversationQuery-->ConversationService: command

    ConversationService-->ConversationEndpoint: command
    ConversationEndpoint->ConversationEndpoint: response := Response(command, nil)
    ConversationEndpoint-->ConversationHTTPTransport: response
    ConversationHTTPTransport-->Router: response
    Router-->FEConversationService: response
    FEConversationService-->EventCommentsContainer: response
    EventCommentsContainer-->EventPage: response
    EventPage-->Member: response
end

@enduml