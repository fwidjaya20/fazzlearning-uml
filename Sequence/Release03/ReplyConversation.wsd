@startuml ReplyConversation

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor "Admin" as Admin
participant ":DetailEventPage" as DetailEventPage
participant ":DetailEventContainer" as DetailEventContainer
participant ":WallPostContainer" as WallPostContainer
participant ":CommentComponent" as CommentComponent
participant ":CommentForm" as CommentForm
participant ":ConversationService (Frontend)" as FEConversationService
participant ":Router" as Router
participant ":ConversationHTTPTransport" as ConversationHTTPTransport
participant ":ConversationEndpoint" as ConversationEndpoint
participant ":ConversationService" as ConversationService
participant ":ConversationCommand" as ConversationCommand
participant ":ConversationQuery" as ConversationQuery

Admin->DetailEventPage: Open "Detail Event" Page
DetailEventPage->DetailEventContainer: Render "Detail Event" Container
DetailEventContainer->WallPostContainer: Render "Wall Post" Container
WallPostContainer->CommentComponent: Render "Comment" Component
CommentComponent->CommentForm: Render "Comment Form" Component
CommentForm-->CommentComponent: rendered
CommentComponent-->WallPostContainer: rendered
WallPostContainer-->DetailEventContainer: rendered
DetailEventContainer-->DetailEventPage: rendered
DetailEventPage-->Admin: rendered

Admin->DetailEventPage: fill form
DetailEventPage->DetailEventContainer: fill form
DetailEventContainer->WallPostContainer: fill form
WallPostContainer->CommentComponent: fill form
CommentComponent->CommentForm: fill form
CommentForm-->CommentComponent: form data
CommentComponent-->WallPostContainer: form data
WallPostContainer-->DetailEventContainer: form data
DetailEventContainer-->DetailEventPage: form data
DetailEventPage-->Admin: form data

Admin->DetailEventPage: Hit "Enter" on Field
DetailEventPage->DetailEventContainer: hit
DetailEventContainer->WallPostContainer: hit
WallPostContainer->CommentComponent: hit
CommentComponent->CommentForm: handleReplySubmitted(e)
CommentForm->CommentForm: createReply()
CommentForm->FEConversationService: createReply(commentId, payload)
FEConversationService->Router: route("POST", "v2/event/{event_id}/comment/{comment_id}/reply")
Router->ConversationHTTPTransport: CreateReply(ConversationService, []ServerOption)
ConversationHTTPTransport->ConversationEndpoint: CreateReply(ConversationService)
ConversationEndpoint->ConversationService: CreateReply(context, payload)
ConversationService->ConversationService: Validate()

alt "Is Not Valid"
    ConversationService-->ConversationEndpoint: UnprocessableEntity
    ConversationEndpoint-->ConversationHTTPTransport: UnprocessableEntity
    ConversationHTTPTransport-->Router: UnprocessableEntity
    Router-->FEConversationService: UnprocessableEntity
    FEConversationService-->CommentForm: UnprocessableEntity
    CommentForm-->CommentComponent: UnprocessableEntity
    CommentComponent-->WallPostContainer: UnprocessableEntity
    WallPostContainer-->DetailEventContainer: UnprocessableEntity
    DetailEventContainer-->DetailEventPage: UnprocessableEntity
    DetailEventPage-->Admin: UnprocessableEntity
else
    ConversationService->ConversationService: m := ReplyModel()
    ConversationService->ConversationCommand: Create(context, m)
    ConversationCommand-->ConversationService: uuid

    ConversationService->ConversationQuery: GetPureReplyModel(context, []SliceCondition)
    ConversationQuery-->ConversationService: reply
    
    ConversationService-->ConversationEndpoint: reply
    ConversationEndpoint->ConversationEndpoint: repsonse := Response(reply, nil)
    ConversationEndpoint-->ConversationHTTPTransport: response
    ConversationHTTPTransport-->Router: response
    Router-->FEConversationService: response
    FEConversationService-->CommentForm: response
    CommentForm-->CommentComponent: response
    CommentComponent-->WallPostContainer: response
    WallPostContainer-->DetailEventContainer: response
    DetailEventContainer-->DetailEventPage: response
    DetailEventPage-->Admin: response
end

@enduml