@startuml Attend

skinparam Monochrome true
skinparam Shadowing false
hide footbox

actor Member
participant "Page: Home" as HomePage
participant "Component: QR Scanner" as QRScanner
participant "Router" as Router
participant "Attendance: HTTP Transport" as AttendanceHTTPTransport
participant "Attendance: Endpoint" as AttendanceEndpoint
participant "Attendance: Service" as AttendanceService
participant "Attendance: Query" as AttendanceQuery
participant "Attendance: Command" as AttendanceCommand

activate Member

Member->HomePage: Open "Home" Page
activate HomePage
HomePage-->Member: rendered
Member->HomePage: Hit "Scanner" Button
HomePage->QRScanner: Scan the QR Code given
activate QRScanner
QRScanner-->HomePage: callback
deactivate QRScanner
HomePage->Router: route("PATCH", "v2/class/{class_id}/attend")
activate Router
Router->AttendanceHTTPTransport: Attend(AttendanceService, []ServerOption)
activate AttendanceHTTPTransport
AttendanceHTTPTransport->AttendanceEndpoint: Attend(AttendanceService)
activate AttendanceEndpoint
AttendanceEndpoint->AttendanceService: AttendClass(AttendanceService, classId)
activate AttendanceService
AttendanceService->AttendanceQuery: PureModel([]SliceCondition)
activate AttendanceQuery
AttendanceQuery-->AttendanceService: attendance
deactivate AttendanceQuery
AttendanceService->AttendanceService: binding attendance data
AttendanceService->AttendanceCommand: Update(attendance)
activate AttendanceCommand
AttendanceCommand-->AttendanceService: is updated
deactivate AttendanceCommand
AttendanceService-->AttendanceEndpoint: is updated
deactivate AttendanceService
AttendanceEndpoint->AttendanceEndpoint: response := Response(isupdated, nil)
AttendanceEndpoint-->AttendanceHTTPTransport: response
deactivate AttendanceEndpoint
AttendanceHTTPTransport-->Router: response
deactivate AttendanceHTTPTransport
Router-->HomePage: response
deactivate Router
HomePage->HomePage: display QR Code
HomePage-->Member: display QR Code
deactivate HomePage

deactivate Member

@enduml